<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bean.mapper.OrderMapper">

	<!-- 주문번호 받아오기 -->
	<select id="sequenceNumber" resultType="com.bean.entity.OrderMasterDTO">
		SELECT TB_ORDER_M_SEQ.NEXTVAL AS orderMasterNumber
		FROM DUAL
	</select>


	<!-- 주문 마스터 내역 넣기 -->
	<insert id="orderListMaster" parameterType="com.bean.entity.OrderMasterDTO">
		INSERT INTO TB_ORDER_M (
		ORDER_M_NUMBER,
		ORDER_M_TOTAL,
		ORDER_M_TOTAL_AMT,
		MEM_ID
		)
		VALUES (
		#{orderMasterNumber},
		#{orderMasterTotal},
		#{orderMasterTotalAmount},
		#{memId}
		)
	</insert>

	<!-- 주문 디테일 테이블 넣기 -->
	<insert id="orderListDetail" parameterType="com.bean.entity.OrderDetailDTO">
		INSERT INTO TB_ORDER_D(
		ORDER_D_NUMBER,
		ORDER_D_CODE,
		ORDER_D_AMT,
		ORDER_D_PRICE
		)
		VALUES(
		#{orderDetailNumber},
		#{orderDetailCode},
		#{orderDetailAmt},
		#{orderDetailPrice}
		)
	</insert>

	<!-- 주문 마스터 조회 쿼리문, 상태가 완료인 것만 -->
	<select id="viewOrderList"
		resultType="com.bean.entity.OrderMasterDTO">
		SELECT
		ORDER_M_NUMBER as orderMasterNumber,
		ORDER_M_TOTAL as
		orderMasterTotal,
		ORDER_M_TOTAL_AMT as orderMasterTotalAmount,
		ORDER_M_DATE as orderMasterDate,
		STATUS as status
		FROM TB_ORDER_M
		WHERE
		STATUS = '완료'
		AND MEM_ID = #{memId}
	</select>

	<!-- 주문 마스터 조회 쿼리문, 상태가 준비중인 것만 -->
	<select id="statusOrderList"
		resultType="com.bean.entity.OrderMasterDTO">
		SELECT
		ORDER_M_NUMBER as orderMasterNumber,
		ORDER_M_TOTAL as
		orderMasterTotal,
		ORDER_M_TOTAL_AMT as orderMasterTotalAmount,
		ORDER_M_DATE as orderMasterDate,
		STATUS as status,
		MEM_ID as memId
		FROM
		TB_ORDER_M
		WHERE STATUS = '준비중'
		AND MEM_ID = #{memId}
	</select>

	<!-- 상태 눌렀을 때, 주문상세 조회 로직 주문번호, 코드, 메뉴이름, 수량 -->
	<select id="viewOrderDetail"
		resultType="com.bean.entity.OrderDetailDTO">
		SELECT A.ORDER_D_NUMBER AS orderDetailNumber,
		C.MENU_NAME AS menuName,
		A.ORDER_D_AMT AS orderDetailAmt,
		A.ORDER_D_PRICE AS orderDetailPrice
		FROM TB_ORDER_D A INNER JOIN TB_ORDER_M B
		ON
		A.ORDER_D_NUMBER = B.ORDER_M_NUMBER
		INNER JOIN TB_MENU C
		ON
		A.ORDER_D_CODE = C.MENU_CODE
		WHERE B.MEM_ID = #{memId}
		AND B.STATUS = '준비중'
	</select>

	<!-- 완료인 것 상세보기 -->
	<select id="CompleteOrderDetail" resultType="com.bean.entity.OrderDetailDTO">
		SELECT A.ORDER_D_NUMBER AS orderDetailNumber,
		C.MENU_NAME AS menuName,
		A.ORDER_D_AMT AS orderDetailAmt,
		A.ORDER_D_PRICE AS orderDetailPrice
		FROM TB_ORDER_D A INNER JOIN TB_ORDER_M B
		ON
		A.ORDER_D_NUMBER = B.ORDER_M_NUMBER
		INNER JOIN TB_MENU C
		ON
		A.ORDER_D_CODE = C.MENU_CODE
		WHERE B.MEM_ID = #{memId}
		AND B.STATUS = '완료'
	</select>
	
	<!-- 주문 취소_마스터 -->
	<delete id="orderMasterDelete"
		parameterType="com.bean.entity.OrderMasterDTO">
		DELETE FROM TB_ORDER_M
		WHERE MEM_ID = #{memId}
		AND ORDER_M_NUMBER = #{orderMasterNumber}
	</delete>

	<!-- 주문 취소_디테일 -->
	<delete id="orderDetailDelete"
		parameterType="com.bean.entity.OrderDetailDTO">
		DELETE FROM TB_ORDER_D
		WHERE ORDER_D_NUMBER = #{orderDetailNumber}
	</delete>


<!-- 페이징  -->
<!-- 전체 data 가져오기  -->
<select id="allCount" resultType="int">
	SELECT COUNT(*)
	  FROM (SELECT *
              FROM TB_ORDER_M
             WHERE 1=1
               AND MEM_ID = #{memId})

</select>

<!-- 10개씩 페이징 처리되서 가져오기 -->
<select id="pagingOrderList" resultType="com.bean.entity.OrderMasterDTO">
	 SELECT RN
     	  , orderMasterNumber
          , orderMasterTotal
          , orderMasterTotalAmount
          , orderMasterDate
          , status
       FROM ( SELECT ROWNUM AS RN,
              ORDER_M_NUMBER as orderMasterNumber,
              ORDER_M_TOTAL as orderMasterTotal,
              ORDER_M_TOTAL_AMT as orderMasterTotalAmount,
              ORDER_M_DATE as orderMasterDate,
              STATUS as status
                FROM ( SELECT ORDER_M_NUMBER,
                              ORDER_M_TOTAL,
                              ORDER_M_TOTAL_AMT,
                              ORDER_M_DATE,
                              STATUS
                         FROM TB_ORDER_M
                        WHERE STATUS = '완료'
                          AND MEM_ID = #{memId}
                        ORDER BY ORDER_M_NUMBER DESC)
            )
      WHERE RN BETWEEN (#{pageNumber}-1) * 10+1 AND (#{pageNumber}-1+1) * 10
	
</select>



<!-- 재고 차감 -->

	<!-- 주문차감할 Detail 불러오기 -->
	<select id="orderDetailCheck"
		parameterType="com.bean.entity.OrderDetailDTO"
		resultType="com.bean.entity.OrderDetailDTO">
		SELECT A.ORDER_D_CODE AS orderDetailCode,
		A.ORDER_D_AMT AS orderDetailAmt,
		B.MEM_ID AS memId
		FROM TB_ORDER_D A INNER JOIN TB_ORDER_M B
		ON A.ORDER_D_NUMBER = B.ORDER_M_NUMBER
		WHERE MEM_ID = #{memId}
		AND A.ORDER_D_NUMBER = #{orderDetailNumber}
	</select>

	<!-- 재고 불러오기  -->
	<select id="stockCheck" resultType="com.bean.entity.MaterialDTO">
		SELECT *
  	      FROM (
     		    SELECT *
                  FROM TB_MATERIAL
                 WHERE MEM_ID = #{memId}
                   AND MR_NAME = #{mrName}
                 ORDER BY MR_EXPIRED_DATE
                )
         WHERE ROWNUM &lt; 2
	</select>
	<!-- 상태 업데이트 -->
	<update id="statusUpdate"
		parameterType="com.bean.entity.OrderMasterDTO">
		<!-- UPDATE [테이블] SET [열] = '변경할값' WHERE [조건] -->
		UPDATE TB_ORDER_M
		SET STATUS = '완료'
		WHERE ORDER_M_NUMBER = #{orderMasterNumber}
		AND MEM_ID = #{memId}
	</update>

	<!-- (1) 원두 조회 -->
	<!-- (2) 우유 -->
	<!-- (3) 치즈 케익 -->
	<update id="cheese" parameterType="com.bean.entity.MaterialDTO">
		UPDATE TB_MATERIAL
		SET MR_STOCK
		= CASE
		WHEN MR_STOCK >= 1 THEN MR_STOCK - 1
		ELSE 0
		END
		WHERE MR_NAME
		='치즈케익'
		AND MR_EXPIRED_DATE= (
		SELECT MIN(MR_EXPIRED_DATE)
		FROM
		TB_MATERIAL
		WHERE MR_NAME = '치즈케익'
		AND MR_STOCK > 0
		)
	</update>

	<!--(4) 티라미수 -->
	<update id="tiramisu"
		parameterType="com.bean.entity.MaterialDTO">
		UPDATE TB_MATERIAL
		SET MR_STOCK = CASE
		WHEN MR_STOCK >= 1
		THEN MR_STOCK - 1
		ELSE 0
		END
		WHERE MR_NAME = '티라미수'
		AND MR_EXPIRED_DATE= (
		SELECT MIN(MR_EXPIRED_DATE)
		FROM TB_MATERIAL
		WHERE MR_NAME = '티라미수'
		AND
		MR_STOCK > 0
		)
	</update>
	<!-- (5) 컵 -->
	<update id="cup">
		UPDATE TB_MATERIAL
		SET MR_STOCK = CASE
		WHEN MR_STOCK >=
		1 THEN MR_STOCK - 1
		ELSE 0
		END
		WHERE MR_NAME = '컵'
		AND MR_EXPIRED_DATE
		= (
		SELECT MIN(MR_EXPIRED_DATE)
		FROM TB_MATERIAL
		WHERE MR_NAME = '컵'
		AND
		MR_STOCK > 0
		)
	</update>

	<!-- (6) 빨대 -->
	<update id="straw" parameterType="com.bean.entity.OrderDetailDTO">
		UPDATE TB_MATERIAL
		SET MR_STOCK = CASE
		WHEN MR_STOCK >=1 THEN MR_STOCK - 1
		ELSE 0
		END
		WHERE MR_NAME = '빨대'
		AND MR_EXPIRED_DATE
		= (
		SELECT MIN(MR_EXPIRED_DATE)
		FROM TB_MATERIAL
		WHERE MR_NAME = '빨대'
		AND MR_STOCK > 0
		)
	</update>

</mapper>